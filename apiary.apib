FORMAT: 1A

# BuddyPress JS API
An experiment with wireframing and mocking a JS (REST) API for BuddyPress. Any eventual API for BuddyPress will be implemented using [WP-API](https://github.com/WP-API/WP-API). Want to contribute? [Say hi on Github](https://github.com/paulgibbs/bp-tomorrowland).

# Group Activity
The Activity component provides global, personal, and group activity streams with threaded commenting, direct posting, favoriting, and @mentions, all with full RSS feed and email notification support.

## Activity Collection [/activity{?count_total,date_query,display_comments,exclude,in,max,meta_query,page,per_page,show_hidden,search_terms,sort,spam,update_meta_cache}]
### List all Activities [GET]

+ Parameters
    + count_total = `false` (optional, bool) ... If true, an additional DB query is run to count the total activity items for the query.
    + date_query = `array` (optional, array) ... Filter by date. See first parameter of `WP_Date_Query` for format.
    + display_comments = `false` (optional, bool|string) ... Whether to return comments.
        + Values
            + `false` No comments.
            + `"stream"` Show comments within the activity stream.
            + `"threaded"` Show comments threaded below the related activity item.
    + exclude  (optional, string) ... Comma-separated list of activity IDs to exclude from results.
    + in  (optional, string) ...  Comma-separated list of activity IDs to include in results.
    + max = `0` (optional, integer) ... Maximum number of results to return (defaults to unlimited).
    + meta_query = `array` (optional, array) ... Filter by activity meta. See `WP_Meta_Query` for format.
    + page = `1` (optional, integer) ... The page of results to get. Used for pagination.
    + per_page = `25` (optional, integer) ... Results per page.
    + show_hidden = `false` (optional, bool) ... Whether to show activity items that are hidden site-wide.
    + search_terms (optional, string) ... Search for activities matching this value.
    + sort = `"DESC"` (optional, string) ... Sorts results by timestamp, in this order.
        + Values
            + `"ASC"`
            + `"DESC"`
    + spam = `"ham_only"` (optional, string) ... Whether to fetch activity items that have been marked as spam.
        + Values
            + `"all"` Ham and spam.
            + `"ham_only"` No spam.
            + `"spam_only"` Only spam.
    + update_meta_cache = `true` (optional, bool) ... Whether to pre-fetch metadata for queried activity items.

+ Response 200 (application/json)

        [{
        "action": "<a href='http://example.com/members/admin/profile/''>admin</a>&#8217;s profile was updated",
        "component": "xprofile",
        "content": "",
        "date_recorded": "2014-08-10 16:54:37",
        "display_name": "admin",
        "hide_sitewide": 0,
        "id": 554,
        "is_spam": 0,
        "item_id": 0,
        "mptt_left": 0,
        "mptt_right": 0,
        "secondary_item_id": 0,
        "primary_link": "http://example.com/members/admin/profile/",
        "type": "updated_profile",
        "user_email": "example@example.com",
        "user_fullname": "admin",
        "user_id": 1,
        "user_login": "admin",
        "user_nicename": "admin"
        }]

### Create Activity [POST]
+ Request (application/json)

        { "title": "Buy cheese and bread for breakfast." }

+ Response 201 (application/json)

    + Header

            Location: http://example.com/new_thing.html


## Activity [/activity/{id}]
A single Activity object with all its details

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Note to perform action with. Has example value.

### Retrieve Activity [GET]
+ Response 200 (application/json)

    + Header

            X-My-Header: The Value

    + Body

            { "id": 2, "title": "Pick-up posters from post-office" }

### Update Activity [POST]
+ Response 201 (application/json)

    + Header

            Location: http://example.com/new_thing.html

### Remove Activity [DELETE]
+ Response 204


# Group xProfile
The xProfile component allows you to customise your community with fully editable profile fields that allow your users to describe themselves.